name: Load Conjur Workload Policy (API Key, Auto-create)

on:
  push:
    branches: ["main"]
    paths: ["policy/**", ".github/workflows/**"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  load-workload:
    runs-on: ubuntu-latest

    env:
      # Branch id WITHOUT "policy/". For nesting use "apps/team-a".
      POLICY_BRANCH_ID: data

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Conjur session token (API key)
        id: auth
        shell: bash
        env:
          CONJUR_URL:           ${{ secrets.CONJUR_URL }}
          CONJUR_ACCOUNT:       ${{ secrets.CONJUR_ACCOUNT }}
          CONJUR_AUTHN_LOGIN:   ${{ secrets.CONJUR_AUTHN_LOGIN }}   # e.g. host/data/github-app or user:ci-loader
          CONJUR_AUTHN_API_KEY: ${{ secrets.CONJUR_AUTHN_API_KEY }}
        run: |
          set -euo pipefail
          LOGIN_ENC="${CONJUR_AUTHN_LOGIN//\//%2F}"
          LOGIN_ENC="${LOGIN_ENC//:/%3A}"
          SESSION_RAW=$(printf %s "$CONJUR_AUTHN_API_KEY" | \
            curl -s -k --data-binary @- \
              "$CONJUR_URL/authn/$CONJUR_ACCOUNT/$LOGIN_ENC/authenticate")
          SESSION_B64=$(printf %s "$SESSION_RAW" | base64 | tr -d '\r\n')
          test -n "$SESSION_B64" || { echo "Failed to obtain Conjur session token"; exit 1; }
          echo "session_b64=$SESSION_B64" >> "$GITHUB_OUTPUT"

      - name: Load workload policy into Conjur (debugged + auto-create)
        shell: bash
        env:
          CONJUR_URL:       ${{ secrets.CONJUR_URL }}
          CONJUR_ACCOUNT:   ${{ secrets.CONJUR_ACCOUNT }}
          POLICY_BRANCH_ID: ${{ env.POLICY_BRANCH_ID }}
          CONJUR_AUTHN_LOGIN: ${{ secrets.CONJUR_AUTHN_LOGIN }}
        run: |
          set -euo pipefail

          echo "=== Repo contents (policy/) ==="; ls -al policy || true
          test -f policy/workload.yaml || { echo "ERROR: policy/workload.yaml not found"; exit 2; }

          AUTH_HEADER="Authorization: Token token=\"${{ steps.auth.outputs.session_b64 }}\""

          echo "=== /whoami ==="
          curl -k -sS -H "$AUTH_HEADER" "$CONJUR_URL/whoami" -o _whoami.json -w "\nWHOAMI_STATUS:%{http_code}\n"
          cat _whoami.json; echo

          # Encode ONLY the branch id (not the 'policy/' segment)
          BR_ENC="${POLICY_BRANCH_ID//\//%2F}"
          TARGET_URL="$CONJUR_URL/policies/${CONJUR_ACCOUNT}/policy/${BR_ENC}"
          echo "Target URL: $TARGET_URL"

          # Check if branch is visible (empty array means not found or no list rights)
          VIS_STATUS=$(curl -k -sS -H "$AUTH_HEADER" \
            "$CONJUR_URL/resources/${CONJUR_ACCOUNT}?kind=policy&search=${POLICY_BRANCH_ID}" \
            -o _branch.json -w "%{http_code}")
          echo "VIS_STATUS:$VIS_STATUS"; cat _branch.json; echo

          if grep -q '^\[\s*\]\s*$' _branch.json; then
            echo "=== Branch '${POLICY_BRANCH_ID}' not visible; attempting to create under 'root' and grant update ==="
            # Determine role kind/id from CONJUR_AUTHN_LOGIN for the permit
            KIND="user"; ROLE_ID="$CONJUR_AUTHN_LOGIN"
            if [[ "$CONJUR_AUTHN_LOGIN" == host/* ]]; then
              KIND="host"; ROLE_ID="${CONJUR_AUTHN_LOGIN#host/}"
            elif [[ "$CONJUR_AUTHN_LOGIN" == user:* ]]; then
              KIND="user"; ROLE_ID="${CONJUR_AUTHN_LOGIN#user:}"
            fi

            cat > _create-branch.yml <<EOF
- !policy
  id: ${POLICY_BRANCH_ID}

- !permit
  role: !${KIND} ${ROLE_ID}
  privileges: [ update ]
  resource: !policy ${POLICY_BRANCH_ID}
EOF
            # Create under parent 'root'
            CREATE_URL="$CONJUR_URL/policies/${CONJUR_ACCOUNT}/policy/root"
            echo "Creating at: $CREATE_URL"
            CREATE_STATUS=$(curl -k -sS -H "$AUTH_HEADER" -H "Content-Type: application/x-yaml" \
              -X PATCH "$CREATE_URL" --data-binary @_create-branch.yml \
              -o _create_resp.json -w "%{http_code}")
            echo "CREATE_STATUS:$CREATE_STATUS"; cat _create_resp.json || true; echo

            # If we couldn't create (likely 403), fail with a clear message
            if [ "$CREATE_STATUS" -lt 200 ] || [ "$CREATE_STATUS" -ge 300 ]; then
              echo "::error title=Bootstrap needed::Failed to create branch '${POLICY_BRANCH_ID}'. An admin must bootstrap it or grant update on 'root'."
              echo "Suggested bootstrap policy:"
              echo "- !policy\n  id: ${POLICY_BRANCH_ID}\n- !permit\n  role: !${KIND} ${ROLE_ID}\n  privileges: [ update ]\n  resource: !policy ${POLICY_BRANCH_ID}"
              exit 1
            fi
          fi

          echo "=== Uploading workload.yaml ($(wc -c < policy/workload.yaml) bytes) ==="
          LOAD_STATUS=$(curl -k -sS -H "$AUTH_HEADER" -H "Content-Type: application/x-yaml" \
            -X PATCH "$TARGET_URL" --data-binary @policy/workload.yaml \
            -o _load_resp.json -w "%{http_code}")
          echo "HTTP_STATUS:$LOAD_STATUS"; cat _load_resp.json || true; echo
          [[ "$LOAD_STATUS" -ge 200 && "$LOAD_STATUS" -lt 300 ]]
